{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timerStarted","timerStopped","hours","minutes","seconds","captures","e","_this2","preventDefault","timer","setInterval","setState","prevState","clearInterval","_this3","concat","toConsumableArray","react_default","a","createElement","className","onClick","handleTimerStart","bind","handleTimerStop","handleTimerCapture","handleTimerReset","handleCaptureReset","map","time","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAmGeA,2BA9Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,cAAc,EACdC,cAAc,EACdC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,SAAU,IARKb,gFAYFc,GAAG,IAAAC,EAAAZ,KAClBW,EAAEE,iBAEEb,KAAKI,MAAME,eACbN,KAAKc,MAAQC,YAAY,WAEvBH,EAAKI,SAAS,CAAEX,cAAc,EAAMC,cAAc,IAC9CM,EAAKR,MAAMC,eACTO,EAAKR,MAAMK,SAAW,IACxBG,EAAKI,SAAS,SAACC,GAAD,MAAgB,CAAER,SAAU,EAAGD,QAASS,EAAUT,QAAU,KAGxEI,EAAKR,MAAMI,SAAW,IACxBI,EAAKI,SAAS,SAACC,GAAD,MAAgB,CAAER,QAAS,EAAGD,SAAU,EAAGD,MAAOU,EAAUV,MAAQ,KAGpFK,EAAKI,SAAS,SAACC,GAAD,MAAgB,CAAER,QAASQ,EAAUR,QAAU,OAG9D,8CAKSE,GACdA,EAAEE,iBACFb,KAAKgB,SAAS,CAAEX,cAAc,EAAOC,cAAc,IACnDY,cAAclB,KAAKc,gDAGJH,GACfA,EAAEE,iBACFb,KAAKgB,SAAS,CAAEX,cAAc,EAAOC,cAAc,EAAMG,QAAS,EAAGD,QAAS,EAAGD,MAAO,IACxFW,cAAclB,KAAKc,kDAIFH,GAAG,IAAAQ,EAAAnB,KAEpBA,KAAKgB,SAAS,SAACC,GAAD,MAAgB,CAAEP,SAAQ,GAAAU,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAMmB,EAAUP,UAAhB,CAA0BS,EAAKf,MAAMG,MAAQ,IAAMY,EAAKf,MAAMI,QAAU,IAAMW,EAAKf,MAAMK,wDAGhHE,GACjBA,EAAEE,iBACFb,KAAKgB,SAAS,CAAEN,SAAU,sCAI1B,OACEY,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mBAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZzB,KAAKI,MAAMG,MAAQ,IAAMP,KAAKI,MAAMI,QAAU,IAAMR,KAAKI,MAAMK,SAElEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAAS1B,KAAK2B,iBAAiBC,KAAK5B,OAAxE,eAGAsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAS1B,KAAK6B,gBAAgBD,KAAK5B,OAApE,cACAsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAAS1B,KAAK8B,mBAAmBF,KAAK5B,OAA1E,gBACAsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAAS1B,KAAK+B,iBAAiBH,KAAK5B,OAAvE,eACAsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAS1B,KAAKgC,mBAAmBJ,KAAK5B,OAAvE,qBAKNsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZzB,KAAKI,MAAMM,SAASuB,IAAI,SAACC,EAAMC,GAC9B,OAAOb,EAAAC,EAAAC,cAAA,YAAO,YAAcW,EAAQ,GAAK,OAASD,cAtF5CE,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb5c2cf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timerStarted: false,\r\n      timerStopped: true,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      captures: []\r\n    }\r\n  }\r\n\r\n  handleTimerStart(e) {\r\n    e.preventDefault(); //prevent button from submitting to new page\r\n\r\n    if (this.state.timerStopped) {\r\n      this.timer = setInterval(() => {\r\n\r\n        this.setState({ timerStarted: true, timerStopped: false });\r\n        if (this.state.timerStarted) {\r\n          if (this.state.seconds >= 59) {\r\n            this.setState((prevState) => ({ seconds: -1, minutes: prevState.minutes + 1 }));\r\n\r\n          }\r\n          if (this.state.minutes >= 59) {\r\n            this.setState((prevState) => ({ seconds: 0, minutes: -1, hours: prevState.hours + 1 }));\r\n\r\n          }\r\n          this.setState((prevState) => ({ seconds: prevState.seconds + 1 }));\r\n        }\r\n\r\n      }, 1000);\r\n\r\n    }\r\n  }\r\n\r\n  handleTimerStop(e) {\r\n    e.preventDefault();\r\n    this.setState({ timerStarted: false, timerStopped: true });\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  handleTimerReset(e) {\r\n    e.preventDefault();\r\n    this.setState({ timerStarted: false, timerStopped: true, seconds: 0, minutes: 0, hours: 0 });\r\n    clearInterval(this.timer);\r\n\r\n  }\r\n\r\n  handleTimerCapture(e) {\r\n    //new capture + prev captures in captures array\r\n    this.setState((prevState) => ({ captures: [...prevState.captures, this.state.hours + \":\" + this.state.minutes + \":\" + this.state.seconds] }));\r\n  }\r\n\r\n  handleCaptureReset(e) {\r\n    e.preventDefault();\r\n    this.setState({ captures: [] });\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <div className=\"container\">\r\n\r\n          <h2 className=\"text-center\">React StopWatch</h2>\r\n\r\n          <div className=\"timer-container\">\r\n            <div className=\"current-timer\">\r\n              {this.state.hours + \":\" + this.state.minutes + \":\" + this.state.seconds}\r\n            </div>\r\n            <div className=\"timer-controls\">\r\n              <button className=\"btn btn-success\" onClick={this.handleTimerStart.bind(this)}>\r\n                Start Timer\r\n            </button>\r\n              <button className=\"btn btn-info\" onClick={this.handleTimerStop.bind(this)}>Stop Timer</button>\r\n              <button className=\"btn btn-warning\" onClick={this.handleTimerCapture.bind(this)}>Capture Time</button>\r\n              <button className=\"btn btn-danger\" onClick={this.handleTimerReset.bind(this)}>Reset Timer</button>\r\n              <button className=\"btn btn-info\" onClick={this.handleCaptureReset.bind(this)}>Clear Captures</button>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"timer-captures\">\r\n          {this.state.captures.map((time, index) => {\r\n            return <code>{\"Capture \" + (index + 1) + \" -> \" + time}</code>\r\n          })}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}